#  	The ctc-test.properties is used by the bulk client testing .
#	This file provides properties to the process in 2 ways:
#	1.	It acts as a template when property substitution is involved.   Meaning the property value will be derived
#		at execution time.  
#	2.	The other properties will be static.


##--- The following properties are expected to come from the scenario file
#	- ${queryset.dir} indicate which queryset of files to use (because each scenario could be different, bqt, sp, etc)
#	- ${test.queries.dir} indicates which directory in the ${queryset.dir} to find the queries to run.
#	- ${expected.results.dir} indicates which directory in the ${queryset.dir} to find the expected results.  This may be different when 
#			multiple scenarios use the same queries but have different expected results   


##--- The following properties are expected to be passed in as system properties
#	- ${queryset.artifacts.dir} indicates where all query sets can be found
#	- ${vdb.artifacts.dir} indicates where the vdbs can be found


# the location where a specific query set can be found
queryfiles.loc=${queryset.artifacts.dir}/${queryset.dir}/${test.queries.dir}

# the location where the specific expected result files can be found
results.loc=${queryset.artifacts.dir}/${queryset.dir}/${expected.results.dir}

#
#  where to find the vdb's, which is used to define the vdb.definition setting in the deploy.properties
#vdb.loc=${vdb.artifacts.dir}

# turn off the configuration of the datastores (data refresh) and connector bindings (setting the datastore connection info)
#disable_datastore=true

# the location where newly generated expected results will be created (resultmode = generate)
generatedir=target/bulk-query-tests/${queryset.dir}/generate
# the comparison reports for each query set
outputdir=target/bulk-query-tests/${queryset.dir}/output

# write the summary files out to this location to make it easier to assimilate the files
summarydir=target/bulk-query-tests


#  transaction types
#  See the TransactionFactory for the list of types
#### NOTE- this property is being set in the scenario properties file
#transaction-option=off
#transaction-option=auto
#transaction-option=local

#  resultmode options:
#	-	compare :  compare actual results to expected results
#	-	generate : create new expected results
#	-	none :  run the queries, only report when errors occur
#resultmode=none
resultmode=compare
#resultmode=generate


# this is the deploy.properties file which will be used to run all the tests
# it will have these properties updated:
#	1 - vdb.definition (which will be based on vdb.loc)
#deployprops.loc=${project.loc}/target/classes/ctc_tests/deploy.properties

process-batch = 20
connector-batch = 20

# this is how to submit queries to Teiid
# default is true
execute.in.batch=false

##########################################
# properties for Teiid connection
##########################################
connection-type=driver
#connection-type=datasource

#driver=org.teiid.jdbc.TeiidDataSource

### driver and url for connecting in server mode
Driver=org.teiid.jdbc.TeiidDriver
URL=jdbc:metamatrix:${vdb.name}@mm://localhost:31000;user=admin;password=teiid

### driver and url for running in embedded mode
#driver=com.metamatrix.jdbc.EmbeddedDataSource
#URL=jdbc:metamatrix:${vdb.name}@target/classes/ctc_tests/deploy.properties;version=1;user=admin;password=teiid
User=admin
Password=teiid

### dont define Database, it will be set based on the scenario vdb
DatabaseName=${vdb.name}
ServerName=target/classes/ctc_tests/deploy.properties

#PortNumber=0
#application-name=bqt-test

# jboss
# mm.ds-jndiname=java:mmXA
# usertxn-jndiname=UserTransaction

# weblogic
mm.ds-jndiname=mmXA
usertxn-jndiname=java:comp/UserTransaction


# These mappings control what datasource is mapped to which model when the -Dusedatasources=<comma seperated datasource names> option is used
#		or the system environment is set.
#
# By providing the numerical order, it indicates which datasource to assign based on the order in the usedatasources property.
#
# If -Dusedatasources is not set, then the datasource will be assigned in the order they are calling to obtain a datasource. 
#
#

pm1=1
pm2=2
